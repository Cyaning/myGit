
q
shift+: q enter

// ------------ SSH --------------- //
ssh-keygen -t rsa -C "youremail@example.com"
.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥
git clone ssh时出错：
  ssh -T git@github.com
  如果返回是：Permission denied (publickey).那么你可能要在本地ssh-add一下,ssh-add ~/.ssh/youraccount_rsa

// ------------ 初次运行 Git 前的配置 --------------- //
1.用户信息,每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录:
  git config --global user.name "John Doe"
  git config --global user.email johndoe@ example.com
2.查看配置信息:
  git config --list



// ---------------  基本快照 -------------------- //
1. git init  把这个目录变成Git可以管理的仓库
2. git clone [url]
3. git add 将该文件添加到缓存
4. git status 查看你的文件在工作目录与缓存的状态 (详细的输出)
   git status -s (简短的输出)
5. git diff 显示已写入缓存与已修改但尚未写入缓存的改动的区别
   git diff --cached #查看已缓存的改动
   git diff HEAD 查看已缓存的与未缓存的所有改动
   git diff --stat 显示摘要而非整个 diff
6. git commit 记录缓存内容的快照
   git commit -m "注释"   使用 -m 选项以在命令行中提供提交注释
   git commit -a   自动将在提交前将已记录、修改的文件放入缓存区
7. git reset HEAD -- file  取消缓存 已缓存 的内容
    [
      如果你想直接执行 git unstage，你可以在 Git 中配置个别名。 执行 git config --global alias.unstage "reset HEAD" 即可。 一旦执行完它，你就可以直接用 git unstage [file] 作为代替了。
    ]
   git reset --hard HEAD^ 结果相同,会将文件中的修改去掉，回到上一步 
   git reset --hard (commit_id)[ex:fe2599c] 回到版本 commit_id
8. git rm
   git rm file / git rm -f file   会将文件从 缓存区 和你的硬盘中（工作目录）删除
   git rm --cached file  在工作目录中留着该文件

9. git checkout -- file  让这个文件回到最近一次 修改 时的状态, 无论工作区是修改还是删除，都可以“一键还原”


[
  1. git reset --hard ()   --->   commit
  2. git reset HEAD -- file    --->    add
  3. git rm --cached file   --->   add,commit
  4. git checkout -- file   --->   修改内容
]

// -------------------  分支与合并 ---------------------- //
1. git branch 列出可用的分支
   git branch -a  查看远程和本地分支
   git branch (branchname) 创建新分支 

2. git checkout (branch) 切换到我们要修改的分支
   git checkout -b (branchname) 创建新分支，并立即切换到它

3. git branch -d (branchname) 删除分支
   如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

4. git merge 将分支合并到你的当前分支
    [
      1.合并冲突,
      2.文件名更改,依然可以合并
    ]
   git merge --no-of 强制禁用Fast forward模式

5. git log   显示一个分支中提交的更改记录,如果使用 git reset --hard HEAD^ 回退，则回退之前的那些不存在
   git log --oneline   查看历史记录的紧凑简洁的版本
   git log --oneline --graph   查看历史中什么时候出现了分支、合并
   git log --oneline (branchname) ^(otherBranchname)  在不想要看到的分支前放一个 ^,只看branchname不看otherBranchname的记录
   git log --decorate   执行时，我们可以看到我们的标签

   git reflog   显示一个分支中提交的更改记录，每一次的记录，包括回退

6. git tag   给历史记录中的某个重要的一点打上标签
   
   git tag -a v1.0 -m 'v1.0'   命令给最新一次提交打上（HEAD）“v1.0”的标签。 -a 选项意为 “创建一个带注解的标签”,从而使你为标签添加注解 。绝大部分时候都会这么做的。不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解
   git tag -a v0.9 (commit_id)[ex:558151a]    给提交的 commit_id（几个提交之前的事情了） 追加标签 
   git tag -d v0.1.2   删除标签

// --------------------- 分享与更新项目 --------------------- //
1. git remote 列出远端别名
   git remote -v 你还可以看到每个别名的实际链接地址
   git remote add [alias] [url]  为你的项目添加一个新的远端仓库,将 [url] 以 [alias] 的别名添加为本地的远端仓库
   git remote rm [alias]  删除现存的某个别名
2. git fetch 从远端仓库下载新分支与数据 
3. git pull 从远端仓库提取数据并尝试合并到当前分支   ( git fetch + git merge )
4. git push [alias] [branch]，就会将你的 [branch] 分支推送成为 [alias] 远端上的 [branch] 分支


// ------------------ 远程 ---------------------- //
1.创建远程origin的dev分支到本地：
    git checkout -b [本地分支名] [远程名]/[远程分支名],  
or  git branch —track <local_branch_name> origin/<remote_branch_name>
    E: git checkout -b dev origin/dev 

2.本地已经存在的分支和远端分支建立对应关系:
  git branch —set-upstream <local_branch_name> origin/<remote_branch_name>
  git branch --set-upstream-to=origin/<remote_branch_name> <local_branch_name>

2.推送本地分支到远程新分支上: 
  git push [远程名] [本地分支名]:[远程分支名] , E: git push origin local_branch:remote_branch

3.删除远程分支remote_branch: 
  git push [远程名] :[远程分支名]
  
4.添加远端库:
  git remote add <远端库代称> <远端库地址>
  git clone <远端库地址> <目录>   //不需要git init

5.强制远端覆盖本地:
  git fetch --all
  git reset --hard origin/<remote_branch_name>

6.git branch -avv // 查看本地分支与远端分支关系，并且显示分支最新一次提交信息
  git remote show origin // 查看远端分支间关系
